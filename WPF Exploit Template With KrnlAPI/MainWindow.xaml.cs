using ICSharpCode.AvalonEdit.Highlighting;
using ICSharpCode.AvalonEdit.Highlighting.Xshd;
using KrnlAPI;
using Microsoft.Win32;
using System;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using System.Xml;

namespace WPF_Exploit_Template_With_KrnlAPI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        KrnlApi krnl = new KrnlApi();

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                LoadScripts();
                KrnlStatus();
                ScriptsWatcher();
                LoadSyntax();
            }
            catch (Exception error)
            {
                MessageBox.Show(error.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadSyntax()
        {
            using (StreamReader reader = new StreamReader("./Bin/LuaSyntax.xml"))
            {
                using (XmlTextReader xml = new XmlTextReader(reader))
                {
                    Editor.SyntaxHighlighting = HighlightingLoader.Load(xml, HighlightingManager.Instance);
                }
            }
        }

        private void ScriptsWatcher()
        {
            FileSystemWatcher watcher = new FileSystemWatcher();
            watcher.Path = "./Scripts";
            watcher.Filter = "*.*";
            watcher.EnableRaisingEvents = true;
            watcher.Created += Watcher_Created;
            watcher.Deleted += Watcher_Deleted;
            watcher.Renamed += Watcher_Renamed;
        }

        private void Watcher_Renamed(object sender, RenamedEventArgs e)
        {
            this.Dispatcher.Invoke(() =>
            {
                ScriptBox.Items.Clear();
                ScriptBox.Items.Add(Path.GetFileName(e.FullPath));
            });
        }

        private void Watcher_Deleted(object sender, FileSystemEventArgs e)
        {
            this.Dispatcher.Invoke(() =>
            {
                ScriptBox.Items.Remove(Path.GetFileName(e.FullPath));
            });
        }

        private void Watcher_Created(object sender, FileSystemEventArgs e)
        {
            this.Dispatcher.Invoke(() =>
            {
                ScriptBox.Items.Add(Path.GetFileName(e.FullPath));
            });
        }

        private void KrnlStatus()
        {
            DispatcherTimer statusTimer = new DispatcherTimer();
            statusTimer.Interval = TimeSpan.Zero;
            statusTimer.Tick += StatusTimer_Tick;
            statusTimer.Start();
        }

        private void StatusTimer_Tick(object sender, EventArgs e)
        {
            switch (krnl.IsInjected())
            {
                case true:
                    TitleBox.Text = "KrnlAPI WPF Template (Attached)";
                    break;
            }
        }

        private void LoadScripts()
        {
            foreach (var item in Directory.GetFiles("./Scripts", "*.txt"))
            {
                ScriptBox.Items.Add(Path.GetFileName(item));
            }

            foreach (var item in Directory.GetFiles("./Scripts", "*.lua"))
            {
                ScriptBox.Items.Add(Path.GetFileName(item));
            }
        }

        private void ScriptBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ScriptBox.SelectedIndex != -1)
            {
                Editor.Text = File.ReadAllText($"./Scripts/{ScriptBox.SelectedItem}");
            }
        }

        private void InjectButton_Click(object sender, RoutedEventArgs e)
        {
            if (krnl.IsInjected() == true)
            {
                MessageBox.Show("KrnlAPI is already injected", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                krnl.Inject();
            }
        }

        private void SaveFileButton_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFile = new SaveFileDialog();
            saveFile.Filter = "Text Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";
            saveFile.RestoreDirectory = true;

            if (saveFile.ShowDialog() == true)
            {
                File.WriteAllText(saveFile.FileName, Editor.Text);
            }
        }

        private void OpenFileButton_Click(object sender, RoutedEventArgs e)
        {
            OpenFileDialog openFile = new OpenFileDialog();
            openFile.Filter = "Text Files (*.txt)|*.txt|Lua Files (*.lua)|*.lua|All Files (*.*)|*.*";
            openFile.RestoreDirectory = true;

            if (openFile.ShowDialog() == true)
            {
                string content = File.ReadAllText(openFile.FileName);
                Editor.Text = content;
            }
        }

        private void ExecuteButton_Click(object sender, RoutedEventArgs e)
        {
            if (krnl.IsInjected() == true)
            {
                krnl.Execute(Editor.Text);
            }
            else
            {
                MessageBox.Show("KrnlAPI is not injected", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SetFrameRateButton_Click(object sender, RoutedEventArgs e)
        {
            SetFrameWindow setFrame = new SetFrameWindow();
            setFrame.Show();
        }

        private void DeleteScriptMenu_Click(object sender, RoutedEventArgs e)
        {
            if (ScriptBox.SelectedIndex != -1)
            {
                File.Delete($"./Scripts/{ScriptBox.SelectedItem}");
            }
        }
    }
}
